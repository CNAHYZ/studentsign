<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.flytop.studentsign.mapper.UserMapper">

    <!--=========================resultMap===========================-->
    <resultMap id="studentResultMap" type="student">
        <result property="sNo" column="sno"/>
        <result property="sName" column="sname"/>
        <result property="cNo" column="cno"/>
        <result property="gender" column="gender"/>
        <result property="birthday" column="birthday"/>
        <result property="buildingNo" column="building_no"/>
        <result property="roomNo" column="room_no"/>
        <result property="phoneNum" column="phone_num"/>
        <association property="sClass" javaType="class">
            <id property="cNo" column="cno"></id>
            <result property="cName" column="cname"></result>
            <result property="grade" column="grade"></result>
        </association>
    </resultMap>
    <!--===========================查询=============================-->
    <!--用户登录-->
    <select id="userLogin" resultType="user">
        select *
        FROM user
        WHERE username = #{username}
          and pwd = #{pwd}
    </select>

    <!--获取学生信息-->
    <select id="getStuGeneralInfo" resultMap="studentResultMap">
        select a.*, b.*
        from student a
                 left join class b on a.cno = b.cno
        WHERE sno = #{sNo}
    </select>

    <!--获取学生列表-->
    <select id="getAllStudent" resultMap="studentResultMap">
        select a.*, b.cname, b.grade
        from student a
                 left join class b on a.cno = b.cno;
    </select>

    <!--获取班级列表-->
    <select id="getAllSClass" resultType="class">
        select *
        from class;
    </select>

    <!--根据用户名获取用户，用于在删除学生时，
    判断用户表中是否存在该学生的账号密码-->
    <select id="getUser" resultType="user">
        select *
        from user
        where username = #{username};
    </select>

    <!--获取学生总数-->
    <select id="getTotalCount" resultType="int">
        select count(*)
        from student
    </select>

    <!--===========================修改=============================-->
    <!--修改学生信息-->
    <update id="updateStuInfo" parameterType="student">
        update student
        <trim prefix="SET" suffixOverrides="," suffix="where sno=#{sNo}">
            <if test="sName != null and sName != ''">sname=#{sName},</if>
            <if test="cNo != null and cNo != ''">cno=#{cNo},</if>
            <if test="gender != null">gender=#{gender},</if>
            <if test="buildingNo != null">building_no=#{buildingNo},</if>
            <if test="roomNo != null">room_no=#{roomNo},</if>
            <if test="birthday != null">birthday=#{birthday},</if>
            <if test="phoneNum != null">phone_num=#{phoneNum}</if>
        </trim>
    </update>

    <!--修改密码-->
    <update id="changePwdByUsername">
        <if test="username != null and username != ''">
            update user set pwd = #{pwd} where username = #{username}
        </if>
    </update>

    <!--重置学生密码-->
    <update id="resetStuPwd">
        update user
        set pwd=#{pwd},salt=#{salt} where type = 1
        <if test="username!=null and username !=''">
            and username = #{username}
        </if>
    </update>
    <!--===========================插入=============================-->
    <!--添加学生-->
    <insert id="addStudent" parameterType="student">
        <if test="sNo != null and sNo!=''">
            insert student (sno,sname,cno,gender,birthday,building_no,room_no,phone_num)
            values (#{sNo},#{sName},#{cNo}, #{gender}, #{birthday},
            #{buildingNo}, #{roomNo}, #{phoneNum})
        </if>
    </insert>

    <!--批量插入学生信息-->
    <insert id="batchAddStudent">
        insert student (sno,sname,cno,gender,birthday,building_no,room_no,phone_num)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.sNo},#{item.sName},#{item.cNo}, #{item.gender}, #{item.birthday},
            #{item.buildingNo}, #{item.roomNo},#{item.phoneNum})
        </foreach>
    </insert>

    <!--初始化单个学生用户的账号，密码-->
    <insert id="initUser">
        insert into user(username, pwd, salt)
        values (#{username}, #{pwd}, #{salt})
    </insert>

    <!--初始化所有未初始化学生用户的账号，密码-->
    <insert id="initAllUsers">
        insert into user(username, pwd, salt)
        select sno as username, #{pwd}, #{salt}
        from student a
        where not exists(
                select username from user b where a.sno = b.username)
    </insert>
    <!--===========================删除=============================-->
    <!--删除学生-->
    <delete id="deleteStudent">
        delete
        from student
        where
        <if test="_parameter!=null">sno = #{sNo}</if>;
    </delete>

    <!--删除用户-->
    <delete id="deleteUser">
        delete
        from user
        where
        <if test="_parameter!=null">username = #{username}</if>;
    </delete>
</mapper>